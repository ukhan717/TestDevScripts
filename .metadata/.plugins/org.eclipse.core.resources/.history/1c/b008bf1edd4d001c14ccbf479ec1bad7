-- Trigger for XL3
function wait(seconds)
    local start = os.time()
    repeat until os.time() > start + seconds
end

--Reset the instrument to the default settings.
reset()

--Establish variables to make a measurement every 60 seconds 1440 times (24 hours).
local scanCnt = 24 * 60 --1440 minutes = 24 hours
local chanCnt = 9
local totalRdgs = scanCnt * chanCnt

--display.changescreen(display.SCREEN_HOME)
--waitcomplete()

--Empty the buffer and set it to the capacity calculated by totalRdgs.
defbuffer1.clear()
defbuffer1.capacity = totalRdgs

-- Set up the channels to measure temperature using type K thermocouples using internal reference junction.
channel.setdmm("6:7", dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_TEMPERATURE)
channel.setdmm("6:7", dmm.ATTR_MEAS_UNIT, dmm.UNIT_CELSIUS)
channel.setdmm("6:7", dmm.ATTR_MEAS_NPLC, 1)
channel.setdmm("6:7", dmm.ATTR_MEAS_DIGITS, dmm.DIGITS_5_5)
channel.setdmm("6:7", dmm.ATTR_MEAS_TRANSDUCER, dmm.TRANS_THERMOCOUPLE)
channel.setdmm("6:7", dmm.ATTR_MEAS_THERMOCOUPLE, dmm.THERMOCOUPLE_K)

channel.setdmm("1:2,5", dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_DC_VOLTAGE)

channel.setlabel("1","XL3_1_V")
channel.setlabel("2","XL3_2_V")
channel.setlabel("5","Ref_Chnl")
channel.setlabel("6","XL3_1_T")
channel.setlabel("7","XL3_2_T")

-- Set up the scan; channel 2 is first available channel on a 2001-TCSCAN card.
scan.create()
scan.addsinglestep("1,2,6,5,7")
scan.scancount = 0  -- infinite reading
-- Set the amount of time for each scan.
scan.scaninterval = 3.0
-- Write the data to a USB flash drive at the end of the scan.
scan.export("/usb1/TestLogs", scan.WRITE_AFTER_SCAN, buffer.COL_ALL)

-- Set digio line 1 to output an indefinite external trigger.
digio.line[1].mode= digio.MODE_TRIGGER_OPEN_DRAIN
trigger.digout[1].logic = trigger.LOGIC_POSITIVE
trigger.digout[1].pulsewidth = 0
trigger.model.initiate()

while(true)
do
	trigger.digout[1].assert()
	--printbuffer(1, defbuffer1.n, defbuffer1)
	wait(15)
	-- Release digio line 1.
	trigger.digout[1].release()
	wait(15)
	--print("\n ScanState : ScanCount : StepCount :",scanState, scanCount, stepCount)
	--print("\nStep Count" , scan.stepcount) 
	--print("\nTriggering XL3\r\n")
	--if defbuffer1.n > bufferSize then
		--print("\nMax Buffer Size Reached : ", defbuffer1.n)
	--end
end